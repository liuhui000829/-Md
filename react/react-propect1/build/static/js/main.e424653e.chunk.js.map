{"version":3,"sources":["redux/actions/count.js","redux/constant.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reduces/person.js","redux/reduces/index.js","redux/reduces/count.js","redux/store.js","index.js"],"names":["increment","data","type","Count","operation","e","_this$props","_this","props","count","decrement","incrementAsync","value","selectNumber","_this2","this","react_default","a","createElement","person","length","ref","c","style","width","onClick","React","Component","connect","state","time","dispatch","setTimeout","Person","addPerson","name","age","personObj","id","nanoid","console","log","placeholder","map","v","key","App","containers_Count","containers_Person","initState","combineReducers","preState","arguments","undefined","action","concat","Object","toConsumableArray","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","createRoot","document","getElementById","render","es","store","App_App"],"mappings":"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","file":"static/js/main.e424653e.chunk.js","sourcesContent":["// 专门为Count组件生成action对象\r\nimport { INCREMENT, DECREMENT } from '../constant'\r\n\r\n// 同步action 返回一个一般对象\r\nexport const increment = data => ({ type: INCREMENT, data })  //注意: 返回一个对象写法\r\nexport const decrement = data => ({ type: DECREMENT, data })\r\n\r\n\r\n// 异步action 返回一个是个函数 异步action一般都会调用同步action\r\n// export const createIncrementAsyncAction = (data, time) => {\r\n//     return dispatch => {\r\n//         console.log(dispatch)       // 是store中dispatch对象 参考x\r\n//         setTimeout(() => {\r\n//             dispatch(createIncrementAction(data))\r\n//         }, time);\r\n//     }\r\n// }\r\n\r\n//x:\r\n// store.dispatch(createIncrementAsyncAction(value * 1, 500));调用的 返回的函数参数就是 调用对象dispatch\r\n\r\n\r\n// 简写方式:\r\nexport const incrementAsync = (data, time) => dispatch => {\r\n    setTimeout(() => {\r\n        dispatch(increment(data))\r\n    }, time);\r\n}\r\n","// 该模块是用于定义action对象中type类型的常量值  目的只有一个便于管理 防止程序员写错\r\n\r\nexport const INCREMENT ='increment'\r\nexport const DECREMENT ='decrement'\r\n\r\nexport const ADDPERSON ='addperson'\r\n\r\n","/* 容器组件*/\r\n\r\n//2 . 优化写法\r\n//引入CountUI组件\r\nimport React from \"react\";\r\n// 引入connect用于连接 UI组件与redux\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  increment,\r\n  decrement,\r\n  incrementAsync\r\n} from \"../../redux/actions/count\";\r\n\r\nclass Count extends React.Component {\r\n  operation = (type) => {\r\n    return (e) => {\r\n      let {\r\n        count,\r\n        increment,\r\n        decrement,\r\n        incrementAsync,\r\n      } = this.props;\r\n      let value = this.selectNumber.value * 1;\r\n\r\n      if (type === \"increment\") increment(value);\r\n      if (type === \"decrement\") decrement(value);\r\n      if (\r\n        type === \"oddIncrement\"\r\n          ? count % 2 !== 0\r\n            ? increment(value)\r\n            : \"\"\r\n          : \"\"\r\n      );\r\n      if (type === \"asycIncrement\") incrementAsync(value, 1000);\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>当前求和为: {this.props.count}</h1>\r\n        <h2>person组件的人数是{this.props.person.length}</h2>\r\n        <br />\r\n        <select ref={(c) => (this.selectNumber = c)} style={{ width: 100 }}>\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n        </select>\r\n        &nbsp;\r\n        <button onClick={this.operation(\"increment\")} style={{ width: 100 }}>\r\n          +\r\n        </button>\r\n        &nbsp;\r\n        <button onClick={this.operation(\"decrement\")} style={{ width: 100 }}>\r\n          -\r\n        </button>\r\n        &nbsp;\r\n        <button onClick={this.operation(\"oddIncrement\")}>\r\n          当前求和为奇数再加\r\n        </button>\r\n        &nbsp;\r\n        <button onClick={this.operation(\"asycIncrement\")}>异步加</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 自动调用了dispatach\r\nexport default connect(\r\n  (state) => ({ count: state.count, person: state.person }),\r\n  {\r\n    increment,\r\n    decrement,\r\n    incrementAsync,\r\n  }\r\n)(Count);\r\n","import React, { Component } from \"react\";\r\nimport { addPerson } from \"../../redux/actions/person\";\r\nimport { connect } from \"react-redux\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nclass Person extends Component {\r\n  addPerson = () => {\r\n    const name = this.name.value;\r\n    const age = this.age.value;\r\n    const id = nanoid();\r\n    const personObj = { id, name, age };\r\n    this.props.addPerson(personObj);\r\n  };\r\n  render() {\r\n    console.log(this.props.person);\r\n    return (\r\n      <div>\r\n        <h1>我是Person组件</h1>\r\n        <h2>count组件求和为{this.props.count}</h2>\r\n        <input\r\n          ref={(c) => (this.name = c)}\r\n          type=\"text\"\r\n          placeholder=\"请输入名字\"\r\n        />\r\n        <input\r\n          ref={(c) => (this.age = c)}\r\n          type=\"text\"\r\n          placeholder=\"请输入年龄\"\r\n        />\r\n        <button onClick={this.addPerson}>添加</button>\r\n        <ul>\r\n          {this.props.person.map((v) => (\r\n            <li key={v.id}>\r\n              {v.name}---{v.age}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({ person: state.person, count: state.count }),\r\n  {\r\n    addPerson,\r\n  }\r\n)(Person);\r\n","\r\nimport { ADDPERSON } from '../constant'\r\n\r\nexport const addPerson = (data) => ({ type: ADDPERSON, data })","import React from \"react\";\nimport Count from \"./containers/Count\"; // 容器组件\nimport Person from './containers/Person'\n\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <div>\n      <Count/>\n      <Person/>\n    </div>\n  );\n}\n","// 这个必须为纯函数\r\n// \r\n\r\n\r\nimport { ADDPERSON } from '../constant'\r\n\r\nconst initState = [{ id: '001', name: '张三', age: 18 }]\r\nexport default (preState = initState, action) => {\r\n    const { type, data } = action;\r\n    switch (type) {\r\n        case ADDPERSON:\r\n            return [data, ...preState]    // 引用类型必须返回新对象\r\n        default:\r\n            return preState\r\n    }\r\n}","// 汇总之后得reducers\r\n\r\nimport { combineReducers } from 'redux'\r\n//引入为Count组件服务的reducer\r\nimport count from './count'\r\n//引入为person组件服务的reducer\r\nimport person from './person'\r\n// 汇总所有的reducer\r\nexport default combineReducers({\r\n    count,\r\n    person\r\n})","// 创建一个reducer, 本质是一个纯函数\r\n// 会接收到两个参数 一个是之前的对象 和动作对象action\r\n\r\nimport { INCREMENT, DECREMENT } from '../constant'\r\n\r\nconst initState = 0   //初始化\r\nexport default (preState = initState, action) => {\r\n    if (preState === undefined) preState = 0;        // 如果是初始化的时候\r\n    const { type, data } = action;   // action:{type:'increment',data:1};\r\n    switch (type) {\r\n        case INCREMENT:\r\n            return preState + data\r\n        case DECREMENT:\r\n            return preState - data\r\n        default:\r\n            return preState\r\n    }\r\n}","/*\r\n\r\n整个应用只有一个store对象 这个对象只引入一个合并后得reducer\r\n*/\r\n\r\n// 引入createStore,专门用于创建redux中最为核心的store对象  applyMiddlewar中间件\r\nimport { legacy_createStore as createStore, applyMiddleware } from 'redux'\r\n\r\n// redux检测状态得下载这个库\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\n\r\n\r\n// 引入redux-thunk ,用于支持异步action\r\nimport thunk from 'redux-thunk'\r\n\r\nimport reducer from './reduces'\r\n\r\n\r\n// 暴露store\r\nexport default createStore(reducer,composeWithDevTools(applyMiddleware(thunk))  )","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\n\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    // 此处需要用Provider包裹App,目的是让App得后代容器组件都能接收到store\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}