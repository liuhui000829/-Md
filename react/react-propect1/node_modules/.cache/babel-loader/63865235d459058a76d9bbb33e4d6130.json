{"ast":null,"code":"// 专门为Count组件生成action对象\nimport { INCREMENT, DECREMENT } from '../constant'; // 同步action 返回一个一般对象\n\nexport var increment = function increment(data) {\n  return {\n    type: INCREMENT,\n    data: data\n  };\n}; //注意: 返回一个对象写法\n\nexport var decrementAction = function decrementAction(data) {\n  return {\n    type: DECREMENT,\n    data: data\n  };\n}; // 异步action 返回一个是个函数 异步action一般都会调用同步action\n// export const createIncrementAsyncAction = (data, time) => {\n//     return dispatch => {\n//         console.log(dispatch)       // 是store中dispatch对象 参考x\n//         setTimeout(() => {\n//             dispatch(createIncrementAction(data))\n//         }, time);\n//     }\n// }\n//x:\n// store.dispatch(createIncrementAsyncAction(value * 1, 500));调用的 返回的函数参数就是 调用对象dispatch\n// 简写方式:\n\nexport var incrementAsyncAction = function incrementAsyncAction(data, time) {\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(incrementAction(data));\n    }, time);\n  };\n};","map":{"version":3,"sources":["C:/Users/刘先生/Desktop/js-Md/react/react-propect1/src/redux/actions/count.js"],"names":["INCREMENT","DECREMENT","increment","data","type","decrementAction","incrementAsyncAction","time","dispatch","setTimeout","incrementAction"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,aAArC,C,CAEA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,SAAR;AAAmBG,IAAAA,IAAI,EAAJA;AAAnB,GAAL;AAAA,CAAtB,C,CAAuD;;AAC9D,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAF,IAAI;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEH,SAAR;AAAmBE,IAAAA,IAAI,EAAJA;AAAnB,GAAL;AAAA,CAA5B,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;;AACA,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACH,IAAD,EAAOI,IAAP;AAAA,SAAgB,UAAAC,QAAQ,EAAI;AAC5DC,IAAAA,UAAU,CAAC,YAAM;AACbD,MAAAA,QAAQ,CAACE,eAAe,CAACP,IAAD,CAAhB,CAAR;AACH,KAFS,EAEPI,IAFO,CAAV;AAGH,GAJmC;AAAA,CAA7B","sourcesContent":["// 专门为Count组件生成action对象\r\nimport { INCREMENT, DECREMENT } from '../constant'\r\n\r\n// 同步action 返回一个一般对象\r\nexport const increment = data => ({ type: INCREMENT, data })  //注意: 返回一个对象写法\r\nexport const decrementAction = data => ({ type: DECREMENT, data })\r\n\r\n\r\n// 异步action 返回一个是个函数 异步action一般都会调用同步action\r\n// export const createIncrementAsyncAction = (data, time) => {\r\n//     return dispatch => {\r\n//         console.log(dispatch)       // 是store中dispatch对象 参考x\r\n//         setTimeout(() => {\r\n//             dispatch(createIncrementAction(data))\r\n//         }, time);\r\n//     }\r\n// }\r\n\r\n//x:\r\n// store.dispatch(createIncrementAsyncAction(value * 1, 500));调用的 返回的函数参数就是 调用对象dispatch\r\n\r\n\r\n// 简写方式:\r\nexport const incrementAsyncAction = (data, time) => dispatch => {\r\n    setTimeout(() => {\r\n        dispatch(incrementAction(data))\r\n    }, time);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}