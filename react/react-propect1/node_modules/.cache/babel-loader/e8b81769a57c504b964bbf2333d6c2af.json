{"ast":null,"code":"// 专门为Count组件生成action对象\nimport { INCREMENT, DECREMENT } from './constant'; // 同步action 返回一个一般对象\n\nexport var createIncrementAction = function createIncrementAction(data) {\n  return {\n    type: INCREMENT,\n    data: data\n  };\n}; //注意: 返回一个对象写法\n\nexport var createDecrementAction = function createDecrementAction(data) {\n  return {\n    type: DECREMENT,\n    data: data\n  };\n}; // 异步action 返回一个是个函数 异步action一般都会调用同步action\n\nexport var createIncrementAsyncAction = function createIncrementAsyncAction(data, time) {\n  return function (dispatch) {\n    console.log(dispatch); // 是store中dispatch对象 参考x\n\n    setTimeout(function () {\n      return dispatch(createIncrementAction(data));\n    }, time);\n  };\n}; //x:\n// store.dispatch(createIncrementAsyncAction(value * 1, 500));调用的化 \n// 因为count中写了 是store.dispatch调用的 所以这个参数是dispatch","map":{"version":3,"sources":["C:/Users/刘先生/Desktop/js-Md/react/react-propect1/src/redux/count_Action.js"],"names":["INCREMENT","DECREMENT","createIncrementAction","data","type","createDecrementAction","createIncrementAsyncAction","time","dispatch","console","log","setTimeout"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,YAArC,C,CAEA;;AACA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,IAAI;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,SAAR;AAAmBG,IAAAA,IAAI,EAAJA;AAAnB,GAAL;AAAA,CAAlC,C,CAAmE;;AAC1E,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAF,IAAI;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEH,SAAR;AAAmBE,IAAAA,IAAI,EAAJA;AAAnB,GAAL;AAAA,CAAlC,C,CAGP;;AACA,OAAO,IAAMG,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACH,IAAD,EAAOI,IAAP,EAAgB;AACtD,SAAO,UAAAC,QAAQ,EAAI;AAEfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAFe,CAEa;;AAC5BG,IAAAA,UAAU,CAAC,YAAM;AACb,aAAOH,QAAQ,CAACN,qBAAqB,CAACC,IAAD,CAAtB,CAAf;AACH,KAFS,EAEPI,IAFO,CAAV;AAGH,GAND;AAOH,CARM,C,CAWP;AACA;AACA","sourcesContent":["// 专门为Count组件生成action对象\r\nimport { INCREMENT, DECREMENT } from './constant'\r\n\r\n// 同步action 返回一个一般对象\r\nexport const createIncrementAction = data => ({ type: INCREMENT, data })  //注意: 返回一个对象写法\r\nexport const createDecrementAction = data => ({ type: DECREMENT, data })\r\n\r\n\r\n// 异步action 返回一个是个函数 异步action一般都会调用同步action\r\nexport const createIncrementAsyncAction = (data, time) => {\r\n    return dispatch => {\r\n       \r\n        console.log(dispatch)       // 是store中dispatch对象 参考x\r\n        setTimeout(() => {\r\n            return dispatch(createIncrementAction(data))\r\n        }, time);\r\n    }\r\n}\r\n\r\n\r\n//x:\r\n// store.dispatch(createIncrementAsyncAction(value * 1, 500));调用的化 \r\n// 因为count中写了 是store.dispatch调用的 所以这个参数是dispatch "]},"metadata":{},"sourceType":"module"}